package me.Minecraftmage113.InsanityPlugin.helpers;

import org.bukkit.ChatColor;
import org.bukkit.Color;
import org.bukkit.Material;
import org.bukkit.attribute.Attributable;
import org.bukkit.attribute.Attribute;
import org.bukkit.attribute.AttributeModifier;
import org.bukkit.attribute.AttributeModifier.Operation;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemFlag;
import org.bukkit.inventory.ItemStack;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;

import me.Minecraftmage113.InsanityPlugin.items.ItemEnderPorter;

public class InsanityEnums {
	
	static final ItemStack[] items = {
			new ItemEnderPorter(), //1
			new PotionBuilder().setColor(Color.fromRGB(128, 64, 0)).
				addEffects(new PotionEffect(PotionEffectType.SPEED, 6000, 3, true, false, true), 
					new PotionEffect(PotionEffectType.FAST_DIGGING, 3600, 1, false, false, false),
					new PotionEffect(PotionEffectType.JUMP, 1200, 0, false, false, false), 
					new PotionEffect(PotionEffectType.ABSORPTION, 1200, 1, false, false, false)).
				addFlag(ItemFlag.HIDE_POTION_EFFECTS).
				setModelData(InsanityItems.Items.COFFEE.modelData()).
				setName(ChatColor.RESET + "Coffee").
				build(), //2
			new ItemBuilder(Material.STICK).
				setModelData(InsanityItems.Items.BLOCK_FLAGGER.modelData()).
				build(), //3
			new ItemBuilder(Material.STICK).
				setModelData(InsanityItems.Items.DEPRESSION_WAND.modelData()).
				setName(ChatColor.RESET + "" + ChatColor.DARK_BLUE + "" + ChatColor.BOLD + "The Big Sad").
				build(), //4
			new ItemBuilder(Material.ENDER_PEARL).
				setModelData(InsanityItems.Items.BLINK_WAND.modelData()).
				setName("Not yet implemented").
				build(), //5
			new ItemBuilder(Material.LEAD).
				setModelData(InsanityItems.Items.LASSO.modelData()).
				setName(ChatColor.RESET + "" + ChatColor.GOLD + "Lasso").
				setLore("Punch a mob to collect it into your lasso.", 
					"Right click a block with a full lasso to release a mob.", 
					("Currently Contained: " + ChatColor.DARK_GRAY + "Nothing"), 
					(ChatColor.BLACK+""+ChatColor.MAGIC+"|-1")).
				build(), //6
			new ItemBuilder(Material.NETHERITE_HOE).
				setModelData(InsanityItems.Items.REAPERS_SCYTHE.modelData()).
				setName(ChatColor.RESET + "" + ChatColor.DARK_GRAY + "Reaper's Scythe").
				addEnch(Enchantment.VANISHING_CURSE, 1).
				setLore("Punch a player to harvest their head.").
				addFlag(ItemFlag.HIDE_ENCHANTS).
				build(), //7
			new ItemBuilder(Material.STICK).
				setModelData(InsanityItems.Items.CHALK.modelData()).
				setName(ChatColor.RESET + "Chalk").
				build(), //8
			new ItemBuilder(Material.STICK).
				setModelData(InsanityItems.Items.CHALK_PLACED.modelData()).
				build(), //9
			new ItemBuilder(Material.STICK).
				setModelData(InsanityItems.Items.CHALK_PLACED_TURN.modelData()).
				build(), //10
			new ItemBuilder(Material.STICK).
				setModelData(InsanityItems.Items.SOULBINDING_ROCK.modelData()).
				setName(ChatColor.translateAlternateColorCodes('&', "&r&k1&rSoulbinding Stone&k1")).
				build(), //11
		};
	
	public enum Modifiers {
		ROTTING_PRESERVATION,
		ROTTED,
		VULCANITE;
		private AttributeModifier value() {
			switch(this) {
			case ROTTING_PRESERVATION:
				return new AttributeModifier("Rotting Preservation", -0, Operation.ADD_NUMBER);
			case ROTTED:
				return new AttributeModifier("Rotted", -.5, Operation.MULTIPLY_SCALAR_1 );
			case VULCANITE:
				return new AttributeModifier("Vulcanite", 3, Operation.ADD_NUMBER);
			}
			return null;
		}
		private Attribute getAttribute() {
			switch(this) {
			case ROTTING_PRESERVATION:
			case ROTTED:
				return Attribute.GENERIC_MAX_HEALTH;
			case VULCANITE:
				return Attribute.GENERIC_ARMOR;
			}
			return null;
		}
		private AttributeModifier getApplied(Attributable a) {
			for(AttributeModifier m : a.getAttribute(getAttribute()).getModifiers()) {
				if(m.getName().equals(value().getName())) {
					return m;
				}
			}
			return null;
		}
		
		public boolean apply(Attributable a) {
			if(hasMod(a)) { return false; }
			a.getAttribute(getAttribute()).addModifier(value());
			return true;
		}
		public boolean remove(Attributable a) {
			AttributeModifier targetMod = getApplied(a);
			if(targetMod==null) { return false; }
			a.getAttribute(getAttribute()).removeModifier(targetMod);
			return true;
		}
		public boolean hasMod(Attributable a) {
			return (getApplied(a)!=null);
		}
	}
}

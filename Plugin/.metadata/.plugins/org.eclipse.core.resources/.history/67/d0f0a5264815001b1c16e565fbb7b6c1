package me.Minecraftmage113.InsanityPlugin.helpers.objects;

import org.bukkit.attribute.Attributable;
import org.bukkit.attribute.Attribute;
import org.bukkit.attribute.AttributeModifier;
import org.bukkit.entity.Ageable;
import org.bukkit.entity.Breedable;
import org.bukkit.entity.Damageable;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Mob;

public class InsanityEntity {
	final static String[] metaKeys = new String[] {};
	/**
	 * Takes an entity and copies <b>all</b> it's important stuff onto a different entity.
	 * breaks if the entities are not of the same type.
	 * Assumes a blank entity for <b>to</b>, and does not change positioning.
	 */
	public static void clone(Entity from, Entity to) {
		to.setCustomName(from.getCustomName());
		to.setCustomNameVisible(from.isCustomNameVisible());
		to.setFallDistance(from.getFallDistance());
		to.setFireTicks(from.getFireTicks());
		to.setGlowing(from.isGlowing());
		to.setGravity(from.hasGravity());
		to.setInvulnerable(from.isInvulnerable());
		to.setLastDamageCause(from.getLastDamageCause());
		//TODO to.setMetadata(metadataKey, newMetadataValue);
		to.setOp(from.isOp());
		to.setPersistent(from.isPersistent());
		to.setPortalCooldown(from.getPortalCooldown());
		to.setSilent(from.isSilent());
		to.setTicksLived(from.getTicksLived());
		for(Entity passenger : to.getPassengers()) { to.removePassenger(passenger); } //Clears any passengers. Lassos store 1 entity at a time.
		for(String tag : from.getScoreboardTags()) { to.addScoreboardTag(tag); }
		for(String key : metaKeys) { 
			if(from.hasMetadata(key)&&from.getMetadata(key)!=null&&from.getMetadata(key).size()!=0) {
				to.setMetadata(key, from.getMetadata(key).get(0));
			}
		}
		if(from instanceof Attributable && to instanceof Attributable) {
			cloneAttributes((Attributable) from, (Attributable) to);
		}
		if(from instanceof Damageable && to instanceof Damageable) {
			cloneDamageable((Damageable) from, (Damageable) to);
		}
		if(from instanceof Ageable && to instanceof Ageable) {
			cloneAgeable((Ageable) from, (Ageable) to);
		}
		if(from instanceof Breedable && to instanceof Breedable) {
			cloneBreedable((Breedable) from, (Breedable) to);
		}
		if(from instanceof Mob && to instanceof Mob) {
			cloneMob((Mob) from, (Mob) to);
		}
		if(from instanceof LivingEntity && to instanceof LivingEntity) {
			cloneLiving((LivingEntity) from, (LivingEntity) to);
		}
//		Merchant, Villager classers
//		Tameable
//		set to no mount or passengers I guess.
	}
	public static void cloneAttributes(Attributable from, Attributable to) {
		for(Attribute attribute : Attribute.values()) {
			to.getAttribute(attribute).setBaseValue(from.getAttribute(attribute).getBaseValue());
			for(AttributeModifier modifier : from.getAttribute(attribute).getModifiers()) {
				to.getAttribute(attribute).addModifier(modifier);
			}
		}
	}
	public static void cloneDamageable(Damageable from, Damageable to) {
		to.setAbsorptionAmount(from.getAbsorptionAmount());
		to.setHealth(from.getHealth());
	}
	public static void cloneAgeable(Ageable from, Ageable to) {
		if(from.isAdult()) {
			to.setAdult();
		} else {
			to.setBaby();
		}
		to.setAge(from.getAge());
	}
	public static void cloneBreedable(Breedable from, Breedable to) {
		
	}
	public static void cloneMob(Mob from, Mob to) {
		
	}
	public static void cloneLiving(LivingEntity from, LivingEntity to) {
		
	}
}

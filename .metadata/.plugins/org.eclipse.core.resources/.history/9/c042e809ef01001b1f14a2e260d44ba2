package me.Minecraftmage113.InsanityPlugin.items;

import java.util.ArrayList;
import java.util.List;

import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemFlag;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

public class ItemEnderPorter extends ItemStack {
	ItemMeta meta;
	public static Enchantment PORTER_CHARGE, TARGET_X, TARGET_Y, TARGET_Z, TARGET_ID, TARGET_BOUND;
	Location playerWorld;
	public final short maxCharge;
	
	public ItemEnderPorter() {
		this((short) 0);
	}
	public ItemEnderPorter(short charge) {
		super(Material.ENDER_PEARL);
		meta = this.getItemMeta();
		this.maxCharge = 1000;
		setCharge(charge);
		meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
		meta.addItemFlags(ItemFlag.HIDE_ATTRIBUTES);
		meta.setDisplayName(ChatColor.DARK_GREEN + "" + ChatColor.BOLD + "Ender" + ChatColor.DARK_AQUA + ChatColor.BOLD + "Porter");
		meta.setCustomModelData(1);
		this.updateMeta();
	}
	public ItemEnderPorter(ItemStack item, Player p) {
		//time to extract important bits
		meta = item.getItemMeta();
		playerWorld = p.getLocation();
		this.maxCharge = 1000;
	}
	
	public void updateMeta() {
		List<String> lore = new ArrayList<>();
		lore.add("Shift+RClick to bind location.");
		lore.add("RClick to teleport to bound location.");
		lore.add("RClick with pearls in off-hand to charge.");
		lore.add("");
		lore.add("Bound Location: " + ChatColor.DARK_GRAY + "Unbound");
		lore.add("Charge: " + chargeColor() + getCharge() + ChatColor.RESET + "/" + maxCharge); //1 ender pearl can go 50 blocks, doubled for fixed target location = 100 points/pearl
		meta.setLore(lore);
		setItemMeta(meta);
	}
	
	public ChatColor chargeColor() {
		double chargeCounter = (double) getCharge() / (double) maxCharge;
		return chargeCounter==0?ChatColor.DARK_RED:(chargeCounter<=.1?ChatColor.RED:(chargeCounter<.5?ChatColor.GOLD:(chargeCounter<.9?ChatColor.YELLOW:(chargeCounter==1?ChatColor.DARK_GREEN:ChatColor.GREEN))));
	}
	
	@Override
	public int getMaxStackSize() {
		return 1;
	}
	@Override
	public short getDurability() {
		return getCharge();
	}
	@Override
	public void setDurability(short damage) {
		meta.removeEnchant(PORTER_CHARGE);
		addCharge(damage);
	}
	public short getCharge() {
		return (short) (meta.getEnchantLevel(PORTER_CHARGE)-1);
	}
	public void addCharge(short charge) {
		meta.addEnchant(PORTER_CHARGE, getCharge()+charge+1, true);
	}
	public void setCharge(short charge) {
		meta.addEnchant(
				PORTER_CHARGE, 
				charge+1, 
				true);
	}
	@SuppressWarnings("deprecation")
	public Location getTarget() {
		if(meta.getEnchantLevel(TARGET_BOUND)==0){
			return null;
		}
		if(playerWorld.getWorld().getEnvironment().getId()!=meta.getEnchantLevel(TARGET_ID)){
			return null;
		}
		playerWorld.setX(meta.getEnchantLevel(TARGET_X));
		playerWorld.setY(meta.getEnchantLevel(TARGET_Y));
		playerWorld.setZ(meta.getEnchantLevel(TARGET_Z));
		return playerWorld;
	}
	@SuppressWarnings("deprecation")
	public void setTarget(Location target) {
		meta.addEnchant(TARGET_X, (int) target.getX(), true);
		meta.addEnchant(TARGET_Y, (int) target.getY(), true);
		meta.addEnchant(TARGET_Z, (int) target.getZ(), true);
		meta.addEnchant(TARGET_ID, target.getWorld().getEnvironment().getId(), true);
	}
	
}
